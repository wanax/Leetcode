Facebook 系统题目准备


1. 入门级的news feed 


http://www.quora.com/What-are-best-practices-for-building-somet 


http://www.infoq.com/presentations/Scale-at-Facebook 


http://www.infoq.com/presentations/Facebook-Software-Stack 



一般的followup question是估算需要多少server 

另外这个帖子有讨论 


http://www.mitbbs.ca/article_t/JobHunting/32463885.html 



这篇文章稍微提到要怎么approach这种题，可以稍微看看 


http://book.douban.com/reading/23757677/ 







2. facebook chat,这个也算是挺常问的 


http://www.erlang-factory.com/upload/presentations/31/EugeneLet 

https://www.facebook.com/note.php?note_id=14218138919 


http://www.cnblogs.com/piaoger/archive/2012/08/19/2646530.html 

http://essay.utwente.nl/59204/1/scriptie_J_Schipers.pdf 





3. typeahead search/search suggestion，这个也常见 


https://www.facebook.com/video/video.php?v=432864835468 

问题在这个帖子里被讨论到，基本上每个问题，在视频里都有回答 



http://www.mitbbs.com/article_t/JobHunting/32438927.html 







4. Facebook Messaging System(有提到inbox search, which has been asked before） 



messaging system就是一个把所有chat/sms/email之类的都结合起来的一个系统 


http://www.infoq.com/presentations/HBase-at-Facebook 


http://sites.computer.org/debull/A12june/facebook.pdf 


http://www.slideshare.net/brizzzdotcom/facebook-messages-hbase/ 


https://www.youtube.com/watch?v=UaGINWPK068 







5. 任给一个手机的位置信号(经纬度)，需要返回附近5mile 的POI 

这个这里有讨论，这题貌似nyc很爱考... 


http://www.mitbbs.ca/article0/JobHunting/32476139_0.html 






6. Implement second/minute/hour/day counters 

这题真不觉得是system design，但万一问道，还是要有准备，貌似在总部面试会被问 

道.... 

这个帖子有讨论 



http://www.mitbbs.com/article_t/JobHunting/32458451.html 







7. facebook photo storage，这个不太会被问起，但是知道也不错 



https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Beaver.pdf 


https://www.facebook.com/note.php?note_id=76191543919 







8. facebook timeline,这个也不太是个考题，看看就行了 



https://www.facebook.com/note.php?note_id=10150468255628920 


http://highscalability.com/blog/2012/1/23/facebook-timeline-bro 







除了这些，准备一下这些题目 

implement memcache 


http://www.adayinthelifeof.nl/2011/02/06/memcache-internals/ 



implement tinyurl（以及distribute across multiple servers) 


http://stackoverflow.com/questions/742013/how-to-code-a-url-sho 



determine trending topics(twitter) 


http://www.americanscientist.org/issues/pub/the-britney-spears- 


http://www.michael-noll.com/blog/2013/01/18/implementing-real-t 



copy one file to multiple servers 


http://vimeo.com/11280885 





稍微知道一下dynamo key value store，以及google的gfs和big table 





另外推荐一些网站 


http://highscalability.com/blog/category/facebook 

这个high scalability上有很多讲system design的东西，不光是facebook的，没空的 

话，就光看你要面试的那家就好了.. 


facebook engineering blog 


http://www.quora.com/Facebook-Engineering/What-is-Facebooks-arc 


http://stackoverflow.com/questions/3533948/facebook-architectur 




其他家的 


http://www.quora.com/What-are-the-top-startup-engineering-blogs 








Here's a quick breakdown of your onsite interviews. 
The order in which they are scheduled can vary. 
You will have 4 or 5 interviews, at least one interview of each type described below (in no particular order). 
Keep in mind that your interview schedule will be tailored to your background and interests.
 

- 60-minute PhD Research Interview.
 Your interviewer will likely have a PhD in a field related to your research area. 
He/she will want you to describe your research and what you've accomplished in your PhD in a clear, coherent way. 
We're interested in your cultural fit with us, your aptitude in working with others, and your ability to communicate effectively both 
in general terms and in your specific area of research. 
The last 15-20 minutes of this interview will be a whiteboard coding exercise. 
 


- 45-minute whiteboard coding interviews, similar in format to your first interview. 
(Keep in mind that you should not solve the same problem twice in your Facebook interviews. If someone gives you a problem that you've already solved, 
please let him/her know.)
 

- 45-minute Design interview. We will ask you a high-level system design question. This question gives us insight into how you approach a vague problem, 
identify tradeoffs, design a solution, and anticipate potential pitfalls. 

This interview generally does not involve any coding. 

See below for more about interviewing at Facebook.


This email is intended to put you in the right frame of mind so that you know what to expect in our interview process. 



We are interested in your technical abilities and more broadly whether you would do well at Facebook. 
To that end, we have designed different interviews to elicit the qualities we value. 
We’ve found that how you answer programming questions is highly correlated with success at Facebook.
 For example, we don’t believe that traversing a binary tree is particularly difficult, but seeing you write the code to traverse a binary tree tells us a lot. 
Is your implementation correct, efficient, and well-structured? Are you proactive in finding bugs? 
Are you thorough in checking boundary conditions? We care about these qualities and evaluate them by asking you well-calibrated questions.


We also may ask you a high-level system design question. This question gives us insight into how you approach a vague problem, identify tradeoffs, design a solution, 
and anticipate potential pitfalls. Finally, we’re also interested in your cultural fit with us, your aptitude in working with others, 
and your ability to communicate effectively both in general terms and in your specific area of research.
 

Many of our engineers spent a day or two preparing for their interviews and found it to be useful. 
We recommend that you dust off any dormant coding skills by tackling some standard programming competition challenges. 
We wish you the best in your interviews and encourage you to ask any questions you may have.
 

Here are some links that might help you prepare further.

=======================================================================

onsite1 
behavior: 
1)有什么跟同事意见冲突的案例，怎么解决 

2) 以前做过的项目如果现在再做会有什么不同/改进


3）divide and mod，但不能用/或者%，基本也是leetcode原题了

onsite
2
system desgin: 因为我是kernel背景，让我用mutex,cv实现一个semephor，说先考虑
单核，然后拓展到多核，但我只写了单核的就没时间了，不知道多核的会有什么不同，

要求code compilable，
MD三哥从一进来就没好脸色，此轮negative

onsite3:

1) 给你10g文件，1g内存，数总共有多少个不同的数，答案是用bit来记录数字，总共
4b个interger,最多用0.5gb来记录，follow up是如果只有400m怎么办，
答案是把数字
hash一下或者说scan文件多次，每次取尾数bits不一样的数，不用code

2) read file up to 4K, 也是老题了

3) 求平方根，基本也是leetcode原题，但给的数是double，这样如果给的n是小于1的
数，初始的right就得取1而不是
n

onsite4:
也是kernel组的三哥，先上来问了btree跟bst的区别，btree里放多少个index怎么决定
，答案是disk block size / 每个index的长度，如果是内存的话就用cache line size除
还有vm的，
我也不大懂，好像是说如何解决内存的fagement问题，如何把多个分开的小
片段移到一起，用到了madvise这个syscall,还问为什么返回一个新的page之前要清零
，
答案是因为page上可能是别的process的内容
code题是decode，比如说1 → 1, 2 -- > 01, 3 → 001, 4 → 0001,....，给你一个
无限的stream，要求输出数字，应该没啥难度，
follow up是如何优化，我给的答案是
map，就是依次取char而不是bit，然后把char的值对应到string上，他说cpu还有一个
instruction可以直接查询此个char有多少个leading zero

